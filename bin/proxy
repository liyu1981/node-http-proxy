#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    util  = require('util'),
    argv = require('optimist').argv,
    nodeRouter = require('node-router'),
    httpProxy = require('../lib/http-proxy');

var help = [
    "usage: node-http-proxy [options] ",
    "",
    "Starts a node-http-proxy server using the specified command-line options",
    "",
    "options:",
    "  --port   PORT       Port that the proxy server should run on",
    "  --host   HOST       Host that the proxy server should run on",
    "  --config OUTFILE    Location of the configuration file for the proxy server",
    "  --user   USER       User to drop privileges to once server socket is bound",
    "  -h, --help          You're staring at it"
].join('\n');

if (argv.h || argv.help || Object.keys(argv).length === 2) {
  return util.puts(help);
}

var location, config = {},
    port = argv.port || 80, 
    host = argv.host || undefined, 
    user = argv.user;

//
// If we were passed a config, parse it
//
if (argv.config) {
  try {
    var data = fs.readFileSync(argv.config);
    config = JSON.parse(data.toString());
  } catch (ex) {
    util.puts('Error starting node-http-proxy: ' + ex);
    process.exit(1);
  }
} else {
    util.puts('No config given.');
    util.puts(help);
    process.exit(1);
}

//
// If `config.https` is set, then load the required file contents into the config options.
//
if (config.https) {
  Object.keys(config.https).forEach(function (key) {
    // If CA certs are specified, load those too.
    if (key === "ca") {
      for (var i=0; i < config.https.ca.length; i++) {
        if (config.https.ca === undefined) {
          config.https.ca = [];
        }
        config.https.ca[i] = fs.readFileSync(config.https[key][i], 'utf8');
      }
    } else {
      config.https[key] = fs.readFileSync(config.https[key], 'utf8');
    }
  });
}

//
// If we were passed a target, parse the url string
//
if (typeof target === 'string') location = target.split(':');

//
// Create the server with the specified options
//
var server;
var proxyServer;
if (config.route && typeof config.route === 'string') {
  // complex mode, with customized route
  server = nodeRouter.getServer();
  proxyServer = httpProxy.createProxyServer({});
  require(config.route).register(server, proxyServer);
} else {
  // simple mode
  server = httpProxy.createServer(config);
}

//
// Start the server
//
if (host) {
  server.listen(port, host);
} else {
  server.listen(port);
}


//
// Drop privileges if requested
//
if (typeof user === 'string') {
    process.setuid(user);
}

//
// Notify that the server is started
//
if (!config.silent) {
  util.puts('node-http-proxy server now listening on port: ' + port);
}
